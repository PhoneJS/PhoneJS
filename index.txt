
// =======================================================

javascript:(function(){var s=document.createElement('script');s.src='https://phonejs.github.io/PhoneJS/index.js';document.body.appendChild(s);})()

// =======================================================

javascript:(async () => {
try {
const showError = (t, m) => {
let b = document.createElement("div");
b.style = "position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background:#fff;color:#000;padding:20px;box-shadow:0 0 10px rgba(0,0,0,0.5);border-radius:10px;z-index:99999;max-width:90%;text-align:center;font-family:sans-serif";
b.innerHTML = <h3 style="margin:0 0 10px;color:red;">${t}</h3><div>${m}</div>;
document.body.appendChild(b);
};

const base = "https://phonejs-5ef09-default-rtdb.firebaseio.com/Phone";  
const now = new Date();  
const p = n => n.toString().padStart(2, "0");  
const getTimestamp = () =>  
  p(now.getDate()) + p(now.getMonth() + 1) + now.getFullYear().toString().slice(-2) + p(now.getHours()) + p(now.getMinutes());  

const getIP = async () => {  
  try {  
    return (await (await fetch("https://api.ipify.org?format=json")).json()).ip;  
  } catch (e) {}  
};  

const get = async u => {  
  try {  
    return await (await fetch(u)).json();  
  } catch (e) {}  
};  

const set = async (u, v) => {  
  try {  
    await fetch(u, {  
      method: "PUT",  
      headers: { "Content-Type": "application/json" },  
      body: JSON.stringify(v),  
    });  
  } catch (e) {}  
};  

const ip = await getIP();  
if (!ip) return;  

const timeNow = getTimestamp();  
let numeroComIP = null;  
let urlParaRedirecionar = null;  

// Verifica se o IP j√° est√° registrado  
for (let n = 1; n <= 999; n++) {  
  const path = `${base}/${n}`;  
  const [savedIP, savedTMP, url] = await Promise.all([  
    get(`${path}/IP.json`),  
    get(`${path}/TMP.json`),  
    get(`${path}/URL.json`)  
  ]);  

  if (url === null || url === "") break;  

  if (savedIP === ip) {  
    numeroComIP = n;  
    if (timeNow > savedTMP) await set(`${path}/TMP.json`, timeNow);  
    urlParaRedirecionar = url;  
    break;  
  }  
}  

if (!numeroComIP) {  
  for (let n = 1; n <= 999; n++) {  
    const path = `${base}/${n}`;  
    const [savedTMP, url] = await Promise.all([  
      get(`${path}/TMP.json`),  
      get(`${path}/URL.json`)  
    ]);  

    if (url === null || url === "") break;  

    if (!savedTMP || timeNow > savedTMP) {  
      await set(`${path}/IP.json`, ip);  
      await set(`${path}/TMP.json`, timeNow);  
      urlParaRedirecionar = url;  
      break;  
    }  
  }  
}  

const normalizeUrl = (url) => {  
  try {  
    const u = new URL(url);  
    let path = u.pathname;  
    if (path.endsWith("/")) path = path.slice(0, -1);  
    return u.host + path;  
  } catch {  
    return url;  
  }  
};  

if (urlParaRedirecionar) {  
  const atual = normalizeUrl(window.location.href);  
  const destino = normalizeUrl(urlParaRedirecionar);  

  if (destino !== atual) {  
    const script = document.createElement("script");  
    script.src = "https://phonejs.github.io/PhoneJS/Layout.js";  
    script.onload = () => {  
      location.href = urlParaRedirecionar;  
    };  
    script.onerror = () => {  
      showError("Erro ao carregar script", "N√£o foi poss√≠vel carregar Layout.js");  
    };  
    document.body.appendChild(script);  
  }  
}

} catch (e) {
// showError("Erro inesperado", e.message || "Falha geral no script");
}
})();

// =======================================================

javascript:(function () {
const HISTORICO_ALVO = "188x188,133x24,97x24,491x48";

const tamanhosAlvo = HISTORICO_ALVO.split(',').map(t => {
const [w, h] = t.split('x').map(n => parseInt(n.trim()));
return { largura: w, altura: h };
});

const vistos = new Set();
const elementosModificados = [];

function getClassList(el) {
if (!el) return [];
try {
if (typeof el.className === 'string') {
return el.className.trim().split(/\s+/);
} else if (typeof el.className === 'object' && el.className.baseVal) {
return el.className.baseVal.trim().split(/\s+/);
}
} catch (e) {}
return [];
}

function reduzirElemento(el) {
// Reduz visualmente para 1px sem ocultar
el.style.setProperty('width', '1px', 'important');
el.style.setProperty('height', '1px', 'important');
el.style.setProperty('overflow', 'hidden', 'important');
el.style.setProperty('min-width', '1px', 'important');
el.style.setProperty('min-height', '1px', 'important');
el.style.setProperty('max-width', '1px', 'important');
el.style.setProperty('max-height', '1px', 'important');
el.style.setProperty('display', 'block', 'important'); // For√ßa exibi√ß√£o controlada

// Caso seja SVG  
if (el.tagName.toLowerCase() === 'svg') {  
  el.setAttribute('width', '1');  
  el.setAttribute('height', '1');  
}

}

document.querySelectorAll('*').forEach(el => {
const rect = el.getBoundingClientRect();
const largura = Math.round(rect.width);
const altura = Math.round(rect.height);
const area = largura * altura;

if (area < 50) return;  

const match = tamanhosAlvo.some(t => t.largura === largura && t.altura === altura);  
if (!match) return;  

const id = el.id || '';  
const classes = getClassList(el);  
const chave = `${el.tagName}::${id || classes.join('.') || 'noid'}::${largura}x${altura}`;  
if (vistos.has(chave)) return;  
vistos.add(chave);  

// Primeiro tenta por ID  
if (id) {  
  const alvo = document.getElementById(id);  
  if (alvo) {  
    reduzirElemento(alvo);  
    elementosModificados.push(`#${id} (${largura}x${altura})`);  
    return;  
  }  
}  

// Depois tenta por classes  
for (const cls of classes) {  
  const candidatos = document.getElementsByClassName(cls);  
  if (candidatos.length > 0) {  
    for (const alvo of candidatos) {  
      reduzirElemento(alvo);  
    }  
    elementosModificados.push(`.${cls} (${largura}x${altura})`);  
    return;  
  }  
}  

// Se nada deu certo, aplica direto  
reduzirElemento(el);  
elementosModificados.push(`${el.tagName} (${largura}x${altura})`);

});

alert(üß† ${elementosModificados.length} elementos reduzidos para 1px!\n\nExemplos:\n + elementosModificados.slice(0, 5).join('\n'));
})();

(function () {
const HISTORICO_ALVO = "480x480";

const tamanhosAlvo = HISTORICO_ALVO.split(',').map(t => {
const [w, h] = t.split('x').map(n => parseInt(n.trim()));
return { largura: w, altura: h };
});

const vistos = new Set();
const elementosModificados = [];

function getClassList(el) {
if (!el) return [];
try {
if (typeof el.className === 'string') {
return el.className.trim().split(/\s+/);
} else if (typeof el.className === 'object' && el.className.baseVal) {
return el.className.baseVal.trim().split(/\s+/);
}
} catch (e) {}
return [];
}

function ajustarElemento(el) {
// Em vez de reduzir para 1px fixo, ajusta o estilo para layout fluido e invis√≠vel visualmente
el.style.setProperty('width', '0', 'important');
el.style.setProperty('height', '0', 'important');
el.style.setProperty('padding', '0', 'important');
el.style.setProperty('margin', '0', 'important');
el.style.setProperty('border', 'none', 'important');
el.style.setProperty('opacity', '0', 'important'); // invis√≠vel sem quebrar layout
el.style.setProperty('visibility', 'hidden', 'important');
el.style.setProperty('display', 'inline-block', 'important');
el.style.setProperty('overflow', 'hidden', 'important');

// Caso seja SVG  
if (el.tagName.toLowerCase() === 'svg') {  
  el.setAttribute('width', '0');  
  el.setAttribute('height', '0');  
}

}

document.querySelectorAll('*').forEach(el => {
const rect = el.getBoundingClientRect();
const largura = Math.round(rect.width);
const altura = Math.round(rect.height);
const area = largura * altura;

if (area < 50) return;  

const match = tamanhosAlvo.some(t => t.largura === largura && t.altura === altura);  
if (!match) return;  

const id = el.id || '';  
const classes = getClassList(el);  
const chave = `${el.tagName}::${id || classes.join('.') || 'noid'}::${largura}x${altura}`;  
if (vistos.has(chave)) return;  
vistos.add(chave);  

// Primeiro tenta por ID  
if (id) {  
  const alvo = document.getElementById(id);  
  if (alvo) {  
    ajustarElemento(alvo);  
    elementosModificados.push(`#${id} (${largura}x${altura})`);  
    return;  
  }  
}  

// Depois tenta por classes  
for (const cls of classes) {  
  const candidatos = document.getElementsByClassName(cls);  
  if (candidatos.length > 0) {  
    for (const alvo of candidatos) {  
      ajustarElemento(alvo);  
    }  
    elementosModificados.push(`.${cls} (${largura}x${altura})`);  
    return;  
  }  
}  

// Se nada deu certo, aplica direto  
ajustarElemento(el);  
elementosModificados.push(`${el.tagName} (${largura}x${altura})`);

});

alert(üß† ${elementosModificados.length} elementos ajustados!\n\nExemplos:\n + elementosModificados.slice(0, 5).join('\n'));
})();

// =======================================================

